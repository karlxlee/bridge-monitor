import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import {
  Heading,
  Text,
  Box,
  Tooltip,
  Container,
  Stack,
  HStack,
  VStack,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  StatGroup,
  Radio,
  RadioGroup,
} from "@chakra-ui/react";
import useSWR from "swr";

import {
  totalVolume,
  countTransactions,
  checkInterval,
  totalVolumeChange,
  countTransactionsChange,
} from "@/utils/stats";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

function BridgeActivity() {
  const { data, error } = useSWR(`/api/allActivity`, fetcher);
  return {
    activity: data,
    isLoading: !error && !data,
    isError: error,
  };
}

export default function Home() {
  const [dateTime, setDateTime] = useState(new Date());

  useEffect(() => {
    const id = setInterval(() => setDateTime(new Date()), 1000 * 10);
    return () => {
      clearInterval(id);
    };
  }, []);

  const { activity, isLoading } = BridgeActivity();
  const [timeframe, setTimeframe] = useState(1);

  const ActivityBar = (props) => {
    let divisions = timeframe == 1 ? 60 : 48;
    let interval = (timeframe * 60 * 60 * 1000) / divisions;
    return (
      <HStack spacing="4px">
        {[...Array(divisions)].map((e, i) => {
          let startDateTime = new Date(
            dateTime.getTime() - timeframe * 60 * 60 * 1000 + i * interval
          );
          let endDateTime = new Date(
            dateTime.getTime() -
              timeframe * 60 * 60 * 1000 +
              i * interval +
              interval
          );
          let intervalStats = isLoading
            ? false
            : checkInterval(
                activity.transfers.data,
                startDateTime.getTime(),
                endDateTime.getTime(),
                props.bridge && props.bridge
              );
          return (
            <Tooltip
              closeDelay={1}
              key={i}
              label={`${
                intervalStats &&
                (intervalStats.volume != "$0"
                  ? intervalStats.volume + " USD "
                  : "")
              } ${startDateTime.toLocaleDateString()} ${startDateTime.toLocaleTimeString()}`}
            >
              <Box
                w="100%"
                h="40px"
                bg={
                  isLoading
                    ? "lightgray"
                    : intervalStats.count
                    ? "lightgreen"
                    : "lightgray"
                }
              ></Box>
            </Tooltip>
          );
        })}
      </HStack>
    );
  };
  return (
    <div>
      <Head>
        <title>Bridge Monitor</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxW="container.md">
        <Stack spacing={4}>
          <Box mt={12} pb={8} borderRadius="lg" borderWidth={"1px"} p="4">
            <Heading as="h1" size="xl">
              Bridge Monitor
            </Heading>
            <Text color="gray.500" mt={4}>
              Monitor cross-chain bridge activity in real-time and check for
              potential downtime.
            </Text>
          </Box>
          <Box borderRadius="lg" borderWidth={"1px"} p="4">
            <RadioGroup value={timeframe}>
              <Stack spacing={5} direction="row">
                <Radio onChange={() => setTimeframe(1)} value={1}>
                  Last hour
                </Radio>
                <Radio onChange={() => setTimeframe(24)} value={24}>
                  Last 24 hours
                </Radio>
              </Stack>
            </RadioGroup>
          </Box>
          <Box borderRadius="lg" borderWidth={"1px"} p="4">
            <StatGroup>
              <Stat>
                <StatLabel>{timeframe}h Volume</StatLabel>
                <StatNumber>
                  {isLoading
                    ? ""
                    : totalVolume(activity.transfers.data, timeframe)}
                </StatNumber>
                <StatHelpText>
                  <StatArrow
                    type={
                      !isLoading
                        ? totalVolumeChange(
                            activity.transfers.data,
                            timeframe
                          ) > 0
                          ? "increase"
                          : "decrease"
                        : "increase"
                    }
                  />
                  {isLoading
                    ? ""
                    : totalVolumeChange(activity.transfers.data, timeframe)}
                  %
                </StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>Transactions</StatLabel>
                <StatNumber>
                  {isLoading
                    ? ""
                    : countTransactions(activity.transfers.data, timeframe)}
                </StatNumber>
                <StatHelpText>
                  <StatArrow
                    type={
                      !isLoading
                        ? countTransactionsChange(
                            activity.transfers.data,
                            timeframe
                          ) > 0
                          ? "increase"
                          : "decrease"
                        : "increase"
                    }
                  />
                  {isLoading
                    ? ""
                    : countTransactionsChange(
                        activity.transfers.data,
                        timeframe
                      )}
                  %
                </StatHelpText>
              </Stat>
            </StatGroup>
          </Box>
          <Box borderRadius="lg" borderWidth={"1px"} p="4">
            <Heading as="h2" size="sm" mb={3}>
              All bridges monitored
            </Heading>
            <ActivityBar />
          </Box>
          <Box borderRadius="lg" borderWidth={"1px"} p="4">
            <Heading as="h2" size="sm" mb={3}>
              Optics (Ethereum)
            </Heading>
            <ActivityBar bridge="optics" />
          </Box>
          <Box borderRadius="lg" borderWidth={"1px"} p="4">
            <Heading as="h2" size="sm" mb={3}>
              Wormhole (Ethereum)
            </Heading>
            <ActivityBar bridge="wormhole" />
          </Box>
        </Stack>
      </Container>
    </div>
  );
}
